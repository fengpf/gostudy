筏锁建议

如果您想知道如何在6.824 Raft实验室中使用锁，这里有
一些可能有用的规则和思维方式。

规则1：只要您拥有不止一个goroutine使用的数据，并且
至少一个goroutine可能会修改数据，因此goroutine应该
使用锁来防止同时使用数据。围棋比赛
检测器非常擅长检测违反此规则的行为（尽管
它对以下任何规则都无济于事）。

规则2：只要代码对共享进行了一系列修改
数据，其他goroutine如果查看
序列中途的数据，则应在
整个序列。

一个例子：

  rf.mu.Lock（）
  rf.currentTerm + = 1
  rf.state =候选人
  rf.mu.Unlock（）

另一个goroutine看到其中任何一个都是错误的
单独进行更新（即使用新术语或新术语的旧状态
与旧状态）。因此，我们需要持续将锁保持在
整个更新序列。使用rf.currentTerm的所有其他代码或
rf.state还必须持有该锁，以确保独占访问
用于所有用途。

Lock（）和Unlock（）之间的代码通常称为“关键
部分。”程序员选择的锁定规则（例如“ goroutine
使用rf.currentTerm或rf.state时必须包含rf.mu”）
称为“锁定协议”。

规则3：每当代码执行一系列读取共享数据的操作（或
读取和写入），并且如果修改了另一个goroutine可能会发生故障
序列中途的数据，则应在
整个序列。

Raft RPC处理程序中可能发生的一个示例：

  rf.mu.Lock（）
  如果args.Term> rf.currentTerm {
   rf.currentTerm = args.Term
  }
  rf.mu.Unlock（）

此代码需要在整个序列中连续保持锁。
Raft要求currentTerm仅增加，而从不减少。
另一个RPC处理程序可以在单独的goroutine中执行；如果它
被允许在if语句和the之间修改rf.currentTerm
更新为rf.currentTerm，此代码可能最终会减少
rf.currentTerm。因此，锁必须连续保持在
整个序列。此外，currentTerm的所有其他用法都必须保持
锁定，以确保没有其他goroutine修改currentTerm
在我们的关键部分。

实际的Raft代码需要使用比这些更长的关键部分
例子; 例如，Raft RPC处理程序可能应该包含
锁定整个处理程序。

规则4：在做任何事情时都要锁住通常是一个坏主意
可能需要等待：读取Go频道，在频道上发送，等待
计时器，调用time.Sleep（）或发送RPC（并等待
回复）。原因之一是您可能希望使用其他goroutine
等待期间的进度。另一个原因是避免死锁。想像
两个对等方在保持锁定的同时互相发送RPC；既RPC
处理程序需要接收对等方的锁；RPC处理程序都无法
完成，因为它需要等待的RPC调用持有的锁。

等待的代码应首先释放锁。如果不方便
有时创建一个单独的goroutine做等待很有用。

规则5：小心跌落后的假设并重新获得
锁。当避免等待锁时，可能会发生这种情况
保持。例如，此发送投票RPC的代码不正确：

  rf.mu.Lock（）
  rf.currentTerm + = 1
  rf.state =候选人
  对于<每个对等方> {
    转到func（）{
      rf.mu.Lock（）
      args.Term = rf.currentTerm
      rf.mu.Unlock（）
      Call（“ Raft.RequestVote”，＆args，...）
      //处理回复...
    }（）
  }
  rf.mu.Unlock（）

该代码在单独的goroutine中发送每个RPC。不对
因为args.Term可能与rf.currentTerm不同，
周围的代码决定成为候选人。很多时间可能
在周围的代码何时创建goroutine和何时
goroutine读取rf.currentTerm; 例如，多个术语可能
来去去去，同伴可能不再是候选人。一种修复方法
这是为了使创建的goroutine使用rf.currentTerm的副本
而外部代码则保持锁定状态。同样，回复处理代码
在Call（）之后必须重新检查所有相关假设
重新获取锁；例如，它应该检查
自从决定成为“ rf.currentTerm”以来，
候选人。

可能难以解释和应用这些规则。也许大多数
令人困惑的是规则2和规则3中的代码序列
不应与其他goroutine的读取或写入交错。怎么样
一个人能认出这样的序列吗？一个人应该如何决定
顺序应该开始和结束？

一种方法是从没有锁的代码开始，然后思考
仔细考虑需要在何处添加锁以获得正确性。
这种方法可能很困难，因为它需要对
并发代码的正确性。

更加务实的方法始于观察
没有并发（没有同时执行goroutines），
根本不需要锁。但是你不得不并发
当RPC系统创建goroutines执行RPC处理程序时，以及
因为您需要在单独的goroutine中发送RPC，以避免等待。
您可以通过识别所有并发来有效消除这种并发
goroutines开始的地方（RPC处理程序，后台goroutines
在Make（）和＆c）中创建，在每个开始时获取锁
goroutine，只有在该goroutine具有
完全完成并返回。该锁定协议可确保
没有任何重大并行执行；锁确保
每个goroutine在其他goroutine被执行之前执行完成
允许开始。没有并行执行，就很难违反
规则1、2、3或5。如果每个goroutine的代码孤立地正确
（当单独执行且没有并发goroutine时），很可能会
当您使用锁来抑制并发时，仍然是正确的。那么你
可以避免关于正确性的明确推理，或明确地
确定关键部分。

但是，规则4可能是个问题。所以下一步是找到
代码等待的地方，并添加锁释放和重新获取
（和/或goroutine创建），请小心重新建立
每次重新获取后的假设。您可能会发现此过程更容易
比直接识别必须锁定的序列更正确
正确性。

（顺便说一句，这种方法牺牲的是任何机会
通过在多个内核上并行执行来提高性能：您的代码
在不需要时很可能会持有锁，因此可能
不必要地禁止并行执行goroutine。在另一
一方面，CPU并行化的机会不多
单筏同伴。）